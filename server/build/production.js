var passport = require('passport');

exports.authorizeForAPI = function(req, res, next){
    if(!req.isAuthenticated()) {
      res.sendStatus(403);
    } else {
      next();
    }
  };

exports.checkUser = function(req, res, next){
  if (!req.isAuthenticated()){
    return res.json({permission: false});
  } else {
    return res.json({permission: true});
  }
};

exports.pgData = {
      host: 'localhost',
      database: 'postgres',
      user : 'student',
      port : 5432,
      password : '',
      ssl: false
    };

// var LocalStrategy = require('passport-local').Strategy;
var User = require('../models/userModel.js');
var passport = require('passport');
var GithubStrategy = require('passport-github').Strategy;
var LocalStrategy = require('passport-local').Strategy;
var bcrypt = require('bcrypt');
var flash = require('connect-flash');

module.exports = function(passport) {

  passport.serializeUser(function(user, done) {
    done(null, user.id);
  });

  passport.deserializeUser(function(id, done) {

    User.findUserByGithubId(id, function(err, user) {

      user ? done(null, user) : done(err, null);
    });
  });
  //*************************************************************
  //Github OAuth
  //*************************************************************
  passport.use(new GithubStrategy({
    clientID: '3cf6f618800a697e2bc5',
    clientSecret: 'b160a044255899ac3cc086064b8783ff40fd0c23',
    callbackURL: 'http://127.0.0.1:3000/auth/github/callback',
    passReqToCallback: true
  },

  function(req, accessToken, refreshToken, profile, done){
    // console.log(profile);
    process.nextTick(function() {
      var github_id = profile.id;

      // find the user in the database based on their github_id
      User.findUserByGithubId(github_id, function(err, user) {

        // if there is an error, stop everything and return that
        // i.e. an error connecting to the database
        if (err) return done(err);

        // if the user is found, then log them in
        if (user) {
          return done(null, user);
        } else {

          // if there is no user found, create them
          var newUser = {};

          // take information returned from github and using that data,
          // parse through it and make a newUser object.
          newUser.github_id      = profile.id;
          newUser.username       = profile.username;
          newUser.email          = profile.emails[0].value;
          // save our user to the database
          User.addUser(newUser, function(err, results) {
            if (err) throw err;

            // if successful, return the new user
            return done(null, results);
          });
        }
      });
    });
  }));


};
  //*************************************************************
  //Local Auth
  //*************************************************************
  // passport.use('local-signup', new LocalStrategy({
  //   usernameField: 'email',
  //   passwordField: 'password',
  //   passReqToCallback: true
  // },
  // function(req, email, password, done){
  //   process.nextTick(function(){
  //     User.findLocalUser(req.email, function(err, user){
  //       if(err)
  //         return done(err);
  //       if(user){
  //         return done(null, false, req.flash('signupMessage', 'That email already exists'));
  //       } else {
  //         var newUser = {};
  //         newUser.email = email;
  //         newUser.password = newUser.generateHash(password);

  //         User.addLocalUser(newUser, function(err, results){
  //           if(err) throw err;
  //           //return user if successful
  //           return done(null, results);
  //         });
  //       }
  //     })
  //   });
  // }));

  // passport.use('local', new LocalStrategy({
  //   usernameField: 'email',
  //   passwordField: 'password',
  //   passReqToCallback: true
  // },
  // function(req, email, password, done){
  //   process.nextTick(function(){
  //     User.findLocalUser(req.email, function(err, user){
  //       if(err)
  //         return done(err);
  //       if(!user)
  //         return done(null, false, req.flash('signinMessage', 'No user found'));
  //       if(!User.generateHash(password)){
  //         return done(null, false, req.flash('signinMessage', 'Invalid password'));
  //       }
  //       return done(null, user);
  //     });
  //   });
  // }
  // ));



var pg = require('pg');
var auth = process.env.DATABASE_URL ? null : require('../config/authStore.js');

//This sets up you connection to the database. if on heroku, it links to the postgres database URL they give us.
//Otherwise, it goes to the auth file and pulls it from there.

//*************************************
//Commenting out Paris settings to test
//*************************************

var db = require('knex')({
  client: 'pg',
  connection: 'postgres'
});

//var db = new pg.Client("");
//db.connect();


module.exports = db;


var db = require('../db/db.js');

module.exports.addTask = function (task) {
  // task is {title, description, points, status[complete|inprogress|todo], sprint_id, user_id}
  var testKeys = Object.keys(task).sort();
  if (testKeys !== ['description', 'points', 'sprint_id', 'status', 'title', 'user_id']) {
    return false;
  }
  db("features").insert(task).returning('id').then(
    function (id) {
      console.log('Task inserted at id: ' + id);
      return true;
    }, 
    function (error) {
      console.error(error);
      return false;
    }
  );
};

module.exports.getAllTasks = function (sprint_id) {
  db.select('*').from('features').where('sprint_id', sprint_id).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getCompleteTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'complete'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getInProgressTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'inprogress'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getToDoTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'todo'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getTasksByStatus = function (sprint_id, status) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: status}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getCommentsOnTask = function (feature_id) {
  db.select('*').from('comments').where('feature_id', feature_id).then(
    function (comments) {
      return comments;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

//userModel.js
var db = require('../db/db.js');
var bcrypt = require('bcrypt');

exports.addUser = function(user, cb){
  db('users').insert({email: user.email, username: user.username, github_id: user.github_id}).then(function(){
    // console.log("user inserted");
  })
};

exports.findUserByGithubId = function(id, cb){
  db.select('*').from('users').where('github_id', id).then(function(user){
    cb(null, user[0]);
  });
};

exports.findLocalUser = function(email, cb){
  db.select('*').from('users').where('email', email).then(function(user){
    console.log('Logged here ')
    cb(null, user[0]);
  });
};

exports.addLocalUser = function(user, cb){
  db('users').insert({email: user.email, password: user.password})
  .then(function(){
    console.log('Local user inserted');
  });
};

exports.generateHash = function(password){
  var hash = bcrypt.hashSync(password, 10);
  console.log('password: ' + password + ' hash: ' + hash);
  return hash;
}

//userHandler.js

var User = require('./models/userModel');
var passport = require('passport');
var authStore = require('./config/authStore');

module.exports = function(app){

  app.get('/auth/github', passport.authenticate('github'));

  app.get('/auth/github/callback',
    passport.authenticate('github', { failureRedirect: '/#/signin'}),
  function(req, res) {
    res.redirect('/#/storyboard');
  });

  app.get('/logout', function(req, res) {
    req.logout();
    res.redirect('/');
  });

  // app.get('/signin', function(req, res, next){
  //     res.render('/#/signin');
  // });
  // app.post('/signin', passport.authenticate('local', {
  //   successRedirect: '/storyBoard',
  //   failureRedirect: '/signin',
  //   failureFlash: true
  // }));

  // app.get('/signup', function(req, res){
  //   res.redirect('signup', { message: req.flash('signupMessage') });
  // });
  // app.post('/signup', passport.authenticate('local', {
  //   successRedirect: '/signin',
  //   failureRedirect: '/signup',
  //   failureFlash: true
  // }));

  function isLoggedIn(req, res, next) {
    if(req.isAuthenticated()){
      return next();
    }

    res.redirect('/#/signin');
  }

};

var express = require('express');
var app = express();
var port = process.env.PORT || 3000;
var routes = require(__dirname + '/routes.js');
var session = require('express-session');
var morgan = require('morgan');
var bodyParser = require('body-parser');
var passport = require('passport');
var flash = require('connect-flash');

require('./config/passport')(passport);

app.use(bodyParser.urlencoded({extended: false}));
app.use(session({secret: 'anystringoftext',
         saveUninitialized: true,
         resave: true}));

app.use(passport.initialize());
app.use(passport.session());
app.use(flash());

app.use(express.static(__dirname + '/../client'));
// app.set('view engine', 'html');
app.engine('html', require('ejs').renderFile);

routes(app);

app.listen(port);

console.log('Scrummage server running on port: ' + port);




var passport = require('passport');

exports.authorizeForAPI = function(req, res, next){
    if(!req.isAuthenticated()) {
      res.sendStatus(403);
    } else {
      next();
    }
  };

exports.checkUser = function(req, res, next){
  if (!req.isAuthenticated()){
    return res.json({permission: false});
  } else {
    return res.json({permission: true});
  }
};

exports.pgData = {
      host: 'localhost',
      database: 'postgres',
      user : 'student',
      port : 5432,
      password : '',
      ssl: false
    };

// var LocalStrategy = require('passport-local').Strategy;
var User = require('../models/userModel.js');
var passport = require('passport');
var GithubStrategy = require('passport-github').Strategy;
var LocalStrategy = require('passport-local').Strategy;
var bcrypt = require('bcrypt');
var flash = require('connect-flash');

module.exports = function(passport) {

  passport.serializeUser(function(user, done) {
    done(null, user.id);
  });

  passport.deserializeUser(function(id, done) {

    User.findUserByGithubId(id, function(err, user) {

      user ? done(null, user) : done(err, null);
    });
  });
  //*************************************************************
  //Github OAuth
  //*************************************************************
  passport.use(new GithubStrategy({
    clientID: '3cf6f618800a697e2bc5',
    clientSecret: 'b160a044255899ac3cc086064b8783ff40fd0c23',
    callbackURL: 'http://127.0.0.1:3000/auth/github/callback',
    passReqToCallback: true
  },

  function(req, accessToken, refreshToken, profile, done){
    // console.log(profile);
    process.nextTick(function() {
      var github_id = profile.id;

      // find the user in the database based on their github_id
      User.findUserByGithubId(github_id, function(err, user) {

        // if there is an error, stop everything and return that
        // i.e. an error connecting to the database
        if (err) return done(err);

        // if the user is found, then log them in
        if (user) {
          return done(null, user);
        } else {

          // if there is no user found, create them
          var newUser = {};

          // take information returned from github and using that data,
          // parse through it and make a newUser object.
          newUser.github_id      = profile.id;
          newUser.username       = profile.username;
          newUser.email          = profile.emails[0].value;
          // save our user to the database
          User.addUser(newUser, function(err, results) {
            if (err) throw err;

            // if successful, return the new user
            return done(null, results);
          });
        }
      });
    });
  }));


};
  //*************************************************************
  //Local Auth
  //*************************************************************
  // passport.use('local-signup', new LocalStrategy({
  //   usernameField: 'email',
  //   passwordField: 'password',
  //   passReqToCallback: true
  // },
  // function(req, email, password, done){
  //   process.nextTick(function(){
  //     User.findLocalUser(req.email, function(err, user){
  //       if(err)
  //         return done(err);
  //       if(user){
  //         return done(null, false, req.flash('signupMessage', 'That email already exists'));
  //       } else {
  //         var newUser = {};
  //         newUser.email = email;
  //         newUser.password = newUser.generateHash(password);

  //         User.addLocalUser(newUser, function(err, results){
  //           if(err) throw err;
  //           //return user if successful
  //           return done(null, results);
  //         });
  //       }
  //     })
  //   });
  // }));

  // passport.use('local', new LocalStrategy({
  //   usernameField: 'email',
  //   passwordField: 'password',
  //   passReqToCallback: true
  // },
  // function(req, email, password, done){
  //   process.nextTick(function(){
  //     User.findLocalUser(req.email, function(err, user){
  //       if(err)
  //         return done(err);
  //       if(!user)
  //         return done(null, false, req.flash('signinMessage', 'No user found'));
  //       if(!User.generateHash(password)){
  //         return done(null, false, req.flash('signinMessage', 'Invalid password'));
  //       }
  //       return done(null, user);
  //     });
  //   });
  // }
  // ));



var pg = require('pg');
var auth = process.env.DATABASE_URL ? null : require('../config/authStore.js');

//This sets up you connection to the database. if on heroku, it links to the postgres database URL they give us.
//Otherwise, it goes to the auth file and pulls it from there.

//*************************************
//Commenting out Paris settings to test
//*************************************

var db = require('knex')({
  client: 'pg',
  connection: 'postgres'
});

//var db = new pg.Client("");
//db.connect();


module.exports = db;


var db = require('../db/db.js');

module.exports.addTask = function (task) {
  // task is {title, description, points, status[complete|inprogress|todo], sprint_id, user_id}
  var testKeys = Object.keys(task).sort();
  if (testKeys !== ['description', 'points', 'sprint_id', 'status', 'title', 'user_id']) {
    return false;
  }
  db("features").insert(task).returning('id').then(
    function (id) {
      console.log('Task inserted at id: ' + id);
      return true;
    }, 
    function (error) {
      console.error(error);
      return false;
    }
  );
};

module.exports.getAllTasks = function (sprint_id) {
  db.select('*').from('features').where('sprint_id', sprint_id).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getCompleteTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'complete'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getInProgressTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'inprogress'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getToDoTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'todo'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getTasksByStatus = function (sprint_id, status) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: status}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getCommentsOnTask = function (feature_id) {
  db.select('*').from('comments').where('feature_id', feature_id).then(
    function (comments) {
      return comments;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

//userModel.js
var db = require('../db/db.js');
var bcrypt = require('bcrypt');

exports.addUser = function(user, cb){
  db('users').insert({email: user.email, username: user.username, github_id: user.github_id}).then(function(){
    // console.log("user inserted");
  })
};

exports.findUserByGithubId = function(id, cb){
  db.select('*').from('users').where('github_id', id).then(function(user){
    cb(null, user[0]);
  });
};

exports.findLocalUser = function(email, cb){
  db.select('*').from('users').where('email', email).then(function(user){
    console.log('Logged here ')
    cb(null, user[0]);
  });
};

exports.addLocalUser = function(user, cb){
  db('users').insert({email: user.email, password: user.password})
  .then(function(){
    console.log('Local user inserted');
  });
};

exports.generateHash = function(password){
  var hash = bcrypt.hashSync(password, 10);
  console.log('password: ' + password + ' hash: ' + hash);
  return hash;
}

//userHandler.js

var User = require('./models/userModel');
var passport = require('passport');
var authStore = require('./config/authStore');

module.exports = function(app){

  app.get('/auth/github', passport.authenticate('github'));

  app.get('/auth/github/callback',
    passport.authenticate('github', { failureRedirect: '/#/signin'}),
  function(req, res) {
    res.redirect('/#/storyboard');
  });

  app.get('/logout', function(req, res) {
    req.logout();
    res.redirect('/');
  });

  // app.get('/signin', function(req, res, next){
  //     res.render('/#/signin');
  // });
  // app.post('/signin', passport.authenticate('local', {
  //   successRedirect: '/storyBoard',
  //   failureRedirect: '/signin',
  //   failureFlash: true
  // }));

  // app.get('/signup', function(req, res){
  //   res.redirect('signup', { message: req.flash('signupMessage') });
  // });
  // app.post('/signup', passport.authenticate('local', {
  //   successRedirect: '/signin',
  //   failureRedirect: '/signup',
  //   failureFlash: true
  // }));

  function isLoggedIn(req, res, next) {
    if(req.isAuthenticated()){
      return next();
    }

    res.redirect('/#/signin');
  }

};

var express = require('express');
var app = express();
var port = process.env.PORT || 3000;
var routes = require(__dirname + '/routes.js');
var session = require('express-session');
var morgan = require('morgan');
var bodyParser = require('body-parser');
var passport = require('passport');
var flash = require('connect-flash');

require('./config/passport')(passport);

app.use(bodyParser.urlencoded({extended: false}));
app.use(session({secret: 'anystringoftext',
         saveUninitialized: true,
         resave: true}));

app.use(passport.initialize());
app.use(passport.session());
app.use(flash());

app.use(express.static(__dirname + '/../client'));
// app.set('view engine', 'html');
app.engine('html', require('ejs').renderFile);

routes(app);

app.listen(port);

console.log('Scrummage server running on port: ' + port);




var passport = require('passport');

exports.authorizeForAPI = function(req, res, next){
    if(!req.isAuthenticated()) {
      res.sendStatus(403);
    } else {
      next();
    }
  };

exports.checkUser = function(req, res, next){
  if (!req.isAuthenticated()){
    return res.json({permission: false});
  } else {
    return res.json({permission: true});
  }
};

exports.pgData = {
      host: 'localhost',
      database: 'postgres',
      user : 'student',
      port : 5432,
      password : '',
      ssl: false
    };

// var LocalStrategy = require('passport-local').Strategy;
var User = require('../models/userModel.js');
var passport = require('passport');
var GithubStrategy = require('passport-github').Strategy;
var LocalStrategy = require('passport-local').Strategy;
var bcrypt = require('bcrypt');
var flash = require('connect-flash');

module.exports = function(passport) {

  passport.serializeUser(function(user, done) {
    done(null, user.id);
  });

  passport.deserializeUser(function(id, done) {

    User.findUserByGithubId(id, function(err, user) {

      user ? done(null, user) : done(err, null);
    });
  });
  //*************************************************************
  //Github OAuth
  //*************************************************************
  passport.use(new GithubStrategy({
    clientID: '3cf6f618800a697e2bc5',
    clientSecret: 'b160a044255899ac3cc086064b8783ff40fd0c23',
    callbackURL: 'http://127.0.0.1:3000/auth/github/callback',
    passReqToCallback: true
  },

  function(req, accessToken, refreshToken, profile, done){
    // console.log(profile);
    process.nextTick(function() {
      var github_id = profile.id;

      // find the user in the database based on their github_id
      User.findUserByGithubId(github_id, function(err, user) {

        // if there is an error, stop everything and return that
        // i.e. an error connecting to the database
        if (err) return done(err);

        // if the user is found, then log them in
        if (user) {
          return done(null, user);
        } else {

          // if there is no user found, create them
          var newUser = {};

          // take information returned from github and using that data,
          // parse through it and make a newUser object.
          newUser.github_id      = profile.id;
          newUser.username       = profile.username;
          newUser.email          = profile.emails[0].value;
          // save our user to the database
          User.addUser(newUser, function(err, results) {
            if (err) throw err;

            // if successful, return the new user
            return done(null, results);
          });
        }
      });
    });
  }));


};
  //*************************************************************
  //Local Auth
  //*************************************************************
  // passport.use('local-signup', new LocalStrategy({
  //   usernameField: 'email',
  //   passwordField: 'password',
  //   passReqToCallback: true
  // },
  // function(req, email, password, done){
  //   process.nextTick(function(){
  //     User.findLocalUser(req.email, function(err, user){
  //       if(err)
  //         return done(err);
  //       if(user){
  //         return done(null, false, req.flash('signupMessage', 'That email already exists'));
  //       } else {
  //         var newUser = {};
  //         newUser.email = email;
  //         newUser.password = newUser.generateHash(password);

  //         User.addLocalUser(newUser, function(err, results){
  //           if(err) throw err;
  //           //return user if successful
  //           return done(null, results);
  //         });
  //       }
  //     })
  //   });
  // }));

  // passport.use('local', new LocalStrategy({
  //   usernameField: 'email',
  //   passwordField: 'password',
  //   passReqToCallback: true
  // },
  // function(req, email, password, done){
  //   process.nextTick(function(){
  //     User.findLocalUser(req.email, function(err, user){
  //       if(err)
  //         return done(err);
  //       if(!user)
  //         return done(null, false, req.flash('signinMessage', 'No user found'));
  //       if(!User.generateHash(password)){
  //         return done(null, false, req.flash('signinMessage', 'Invalid password'));
  //       }
  //       return done(null, user);
  //     });
  //   });
  // }
  // ));



var pg = require('pg');
var auth = process.env.DATABASE_URL ? null : require('../config/authStore.js');

//This sets up you connection to the database. if on heroku, it links to the postgres database URL they give us.
//Otherwise, it goes to the auth file and pulls it from there.

//*************************************
//Commenting out Paris settings to test
//*************************************

var db = require('knex')({
  client: 'pg',
  connection: 'postgres'
});

//var db = new pg.Client("");
//db.connect();


module.exports = db;


var db = require('../db/db.js');

module.exports.addTask = function (task) {
  // task is {title, description, points, status[complete|inprogress|todo], sprint_id, user_id}
  var testKeys = Object.keys(task).sort();
  if (testKeys !== ['description', 'points', 'sprint_id', 'status', 'title', 'user_id']) {
    return false;
  }
  db("features").insert(task).returning('id').then(
    function (id) {
      console.log('Task inserted at id: ' + id);
      return true;
    }, 
    function (error) {
      console.error(error);
      return false;
    }
  );
};

module.exports.getAllTasks = function (sprint_id) {
  db.select('*').from('features').where('sprint_id', sprint_id).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getCompleteTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'complete'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getInProgressTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'inprogress'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getToDoTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'todo'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getTasksByStatus = function (sprint_id, status) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: status}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getCommentsOnTask = function (feature_id) {
  db.select('*').from('comments').where('feature_id', feature_id).then(
    function (comments) {
      return comments;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

//userModel.js
var db = require('../db/db.js');
var bcrypt = require('bcrypt');

exports.addUser = function(user, cb){
  db('users').insert({email: user.email, username: user.username, github_id: user.github_id}).then(function(){
    // console.log("user inserted");
  })
};

exports.findUserByGithubId = function(id, cb){
  db.select('*').from('users').where('github_id', id).then(function(user){
    cb(null, user[0]);
  });
};

exports.findLocalUser = function(email, cb){
  db.select('*').from('users').where('email', email).then(function(user){
    console.log('Logged here ')
    cb(null, user[0]);
  });
};

exports.addLocalUser = function(user, cb){
  db('users').insert({email: user.email, password: user.password})
  .then(function(){
    console.log('Local user inserted');
  });
};

exports.generateHash = function(password){
  var hash = bcrypt.hashSync(password, 10);
  console.log('password: ' + password + ' hash: ' + hash);
  return hash;
}

//userHandler.js

var User = require('./models/userModel');
var passport = require('passport');
var authStore = require('./config/authStore');

module.exports = function(app){

  app.get('/auth/github', passport.authenticate('github'));

  app.get('/auth/github/callback',
    passport.authenticate('github', { failureRedirect: '/#/signin'}),
  function(req, res) {
    res.redirect('/#/storyboard');
  });

  app.get('/logout', function(req, res) {
    req.logout();
    res.redirect('/');
  });

  // app.get('/signin', function(req, res, next){
  //     res.render('/#/signin');
  // });
  // app.post('/signin', passport.authenticate('local', {
  //   successRedirect: '/storyBoard',
  //   failureRedirect: '/signin',
  //   failureFlash: true
  // }));

  // app.get('/signup', function(req, res){
  //   res.redirect('signup', { message: req.flash('signupMessage') });
  // });
  // app.post('/signup', passport.authenticate('local', {
  //   successRedirect: '/signin',
  //   failureRedirect: '/signup',
  //   failureFlash: true
  // }));

  function isLoggedIn(req, res, next) {
    if(req.isAuthenticated()){
      return next();
    }

    res.redirect('/#/signin');
  }

};

var express = require('express');
var app = express();
var port = process.env.PORT || 3000;
var routes = require(__dirname + '/routes.js');
var session = require('express-session');
var morgan = require('morgan');
var bodyParser = require('body-parser');
var passport = require('passport');
var flash = require('connect-flash');

require('./config/passport')(passport);

app.use(bodyParser.urlencoded({extended: false}));
app.use(session({secret: 'anystringoftext',
         saveUninitialized: true,
         resave: true}));

app.use(passport.initialize());
app.use(passport.session());
app.use(flash());

app.use(express.static(__dirname + '/../client'));
// app.set('view engine', 'html');
app.engine('html', require('ejs').renderFile);

routes(app);

app.listen(port);

console.log('Scrummage server running on port: ' + port);




var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);
var passport = require('passport');

exports.authorizeForAPI = function(req, res, next){
    if(!req.isAuthenticated()) {
      res.sendStatus(403);
    } else {
      next();
    }
  };

exports.checkUser = function(req, res, next){
  if (!req.isAuthenticated()){
    return res.json({permission: false});
  } else {
    return res.json({permission: true});
  }
};

exports.pgData = {
      host: 'localhost',
      database: 'postgres',
      user : 'student',
      port : 5432,
      password : '',
      ssl: false
    };

// var LocalStrategy = require('passport-local').Strategy;
var User = require('../models/userModel.js');
var passport = require('passport');
var GithubStrategy = require('passport-github').Strategy;
var LocalStrategy = require('passport-local').Strategy;
var bcrypt = require('bcrypt');
var flash = require('connect-flash');

module.exports = function(passport) {

  passport.serializeUser(function(user, done) {
    done(null, user.id);
  });

  passport.deserializeUser(function(id, done) {

    User.findUserByGithubId(id, function(err, user) {

      user ? done(null, user) : done(err, null);
    });
  });
  //*************************************************************
  //Github OAuth
  //*************************************************************
  passport.use(new GithubStrategy({
    clientID: '3cf6f618800a697e2bc5',
    clientSecret: 'b160a044255899ac3cc086064b8783ff40fd0c23',
    callbackURL: 'http://127.0.0.1:3000/auth/github/callback',
    passReqToCallback: true
  },

  function(req, accessToken, refreshToken, profile, done){
    // console.log(profile);
    process.nextTick(function() {
      var github_id = profile.id;

      // find the user in the database based on their github_id
      User.findUserByGithubId(github_id, function(err, user) {

        // if there is an error, stop everything and return that
        // i.e. an error connecting to the database
        if (err) return done(err);

        // if the user is found, then log them in
        if (user) {
          return done(null, user);
        } else {

          // if there is no user found, create them
          var newUser = {};

          // take information returned from github and using that data,
          // parse through it and make a newUser object.
          newUser.github_id      = profile.id;
          newUser.username       = profile.username;
          newUser.email          = profile.emails[0].value;
          // save our user to the database
          User.addUser(newUser, function(err, results) {
            if (err) throw err;

            // if successful, return the new user
            return done(null, results);
          });
        }
      });
    });
  }));


};
  //*************************************************************
  //Local Auth
  //*************************************************************
  // passport.use('local-signup', new LocalStrategy({
  //   usernameField: 'email',
  //   passwordField: 'password',
  //   passReqToCallback: true
  // },
  // function(req, email, password, done){
  //   process.nextTick(function(){
  //     User.findLocalUser(req.email, function(err, user){
  //       if(err)
  //         return done(err);
  //       if(user){
  //         return done(null, false, req.flash('signupMessage', 'That email already exists'));
  //       } else {
  //         var newUser = {};
  //         newUser.email = email;
  //         newUser.password = newUser.generateHash(password);

  //         User.addLocalUser(newUser, function(err, results){
  //           if(err) throw err;
  //           //return user if successful
  //           return done(null, results);
  //         });
  //       }
  //     })
  //   });
  // }));

  // passport.use('local', new LocalStrategy({
  //   usernameField: 'email',
  //   passwordField: 'password',
  //   passReqToCallback: true
  // },
  // function(req, email, password, done){
  //   process.nextTick(function(){
  //     User.findLocalUser(req.email, function(err, user){
  //       if(err)
  //         return done(err);
  //       if(!user)
  //         return done(null, false, req.flash('signinMessage', 'No user found'));
  //       if(!User.generateHash(password)){
  //         return done(null, false, req.flash('signinMessage', 'Invalid password'));
  //       }
  //       return done(null, user);
  //     });
  //   });
  // }
  // ));



var pg = require('pg');
var auth = process.env.DATABASE_URL ? null : require('../config/authStore.js');

//This sets up you connection to the database. if on heroku, it links to the postgres database URL they give us.
//Otherwise, it goes to the auth file and pulls it from there.

//*************************************
//Commenting out Paris settings to test
//*************************************

var db = require('knex')({
  client: 'pg',
  connection: 'postgres'
});

//var db = new pg.Client("");
//db.connect();


module.exports = db;


var db = require('../db/db.js');

module.exports.addTask = function (task) {
  // task is {title, description, points, status[complete|inprogress|todo], sprint_id, user_id}
  var testKeys = Object.keys(task).sort();
  if (testKeys !== ['description', 'points', 'sprint_id', 'status', 'title', 'user_id']) {
    return false;
  }
  db("features").insert(task).returning('id').then(
    function (id) {
      console.log('Task inserted at id: ' + id);
      return true;
    }, 
    function (error) {
      console.error(error);
      return false;
    }
  );
};

module.exports.getAllTasks = function (sprint_id) {
  db.select('*').from('features').where('sprint_id', sprint_id).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getCompleteTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'complete'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getInProgressTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'inprogress'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getToDoTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'todo'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getTasksByStatus = function (sprint_id, status) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: status}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getCommentsOnTask = function (feature_id) {
  db.select('*').from('comments').where('feature_id', feature_id).then(
    function (comments) {
      return comments;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

//userModel.js
var db = require('../db/db.js');
var bcrypt = require('bcrypt');

exports.addUser = function(user, cb){
  db('users').insert({email: user.email, username: user.username, github_id: user.github_id}).then(function(){
    // console.log("user inserted");
  })
};

exports.findUserByGithubId = function(id, cb){
  db.select('*').from('users').where('github_id', id).then(function(user){
    cb(null, user[0]);
  });
};

exports.findLocalUser = function(email, cb){
  db.select('*').from('users').where('email', email).then(function(user){
    console.log('Logged here ')
    cb(null, user[0]);
  });
};

exports.addLocalUser = function(user, cb){
  db('users').insert({email: user.email, password: user.password})
  .then(function(){
    console.log('Local user inserted');
  });
};

exports.generateHash = function(password){
  var hash = bcrypt.hashSync(password, 10);
  console.log('password: ' + password + ' hash: ' + hash);
  return hash;
}

//userHandler.js

var User = require('./models/userModel');
var passport = require('passport');
var authStore = require('./config/authStore');

module.exports = function(app){

  app.get('/auth/github', passport.authenticate('github'));

  app.get('/auth/github/callback',
    passport.authenticate('github', { failureRedirect: '/#/signin'}),
  function(req, res) {
    res.redirect('/#/storyboard');
  });

  app.get('/logout', function(req, res) {
    req.logout();
    res.redirect('/');
  });

  // app.get('/signin', function(req, res, next){
  //     res.render('/#/signin');
  // });
  // app.post('/signin', passport.authenticate('local', {
  //   successRedirect: '/storyBoard',
  //   failureRedirect: '/signin',
  //   failureFlash: true
  // }));

  // app.get('/signup', function(req, res){
  //   res.redirect('signup', { message: req.flash('signupMessage') });
  // });
  // app.post('/signup', passport.authenticate('local', {
  //   successRedirect: '/signin',
  //   failureRedirect: '/signup',
  //   failureFlash: true
  // }));

  function isLoggedIn(req, res, next) {
    if(req.isAuthenticated()){
      return next();
    }

    res.redirect('/#/signin');
  }

};

var express = require('express');
var app = express();
var port = process.env.PORT || 3000;
var routes = require(__dirname + '/routes.js');
var session = require('express-session');
var morgan = require('morgan');
var bodyParser = require('body-parser');
var passport = require('passport');
var flash = require('connect-flash');

require('./config/passport')(passport);

app.use(bodyParser.urlencoded({extended: false}));
app.use(session({secret: 'anystringoftext',
         saveUninitialized: true,
         resave: true}));

app.use(passport.initialize());
app.use(passport.session());
app.use(flash());

app.use(express.static(__dirname + '/../client'));
// app.set('view engine', 'html');
app.engine('html', require('ejs').renderFile);

routes(app);

app.listen(port);

console.log('Scrummage server running on port: ' + port);




var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);
var passport = require('passport');

exports.authorizeForAPI = function(req, res, next){
    if(!req.isAuthenticated()) {
      res.sendStatus(403);
    } else {
      next();
    }
  };

exports.checkUser = function(req, res, next){
  if (!req.isAuthenticated()){
    return res.json({permission: false});
  } else {
    return res.json({permission: true});
  }
};

exports.pgData = {
      host: 'localhost',
      database: 'postgres',
      user : 'student',
      port : 5432,
      password : '',
      ssl: false
    };

// var LocalStrategy = require('passport-local').Strategy;
var User = require('../models/userModel.js');
var passport = require('passport');
var GithubStrategy = require('passport-github').Strategy;
var LocalStrategy = require('passport-local').Strategy;
var bcrypt = require('bcrypt');
var flash = require('connect-flash');

module.exports = function(passport) {

  passport.serializeUser(function(user, done) {
    done(null, user.id);
  });

  passport.deserializeUser(function(id, done) {

    User.findUserByGithubId(id, function(err, user) {

      user ? done(null, user) : done(err, null);
    });
  });
  //*************************************************************
  //Github OAuth
  //*************************************************************
  passport.use(new GithubStrategy({
    clientID: '3cf6f618800a697e2bc5',
    clientSecret: 'b160a044255899ac3cc086064b8783ff40fd0c23',
    callbackURL: 'http://127.0.0.1:3000/auth/github/callback',
    passReqToCallback: true
  },

  function(req, accessToken, refreshToken, profile, done){
    // console.log(profile);
    process.nextTick(function() {
      var github_id = profile.id;

      // find the user in the database based on their github_id
      User.findUserByGithubId(github_id, function(err, user) {

        // if there is an error, stop everything and return that
        // i.e. an error connecting to the database
        if (err) return done(err);

        // if the user is found, then log them in
        if (user) {
          return done(null, user);
        } else {

          // if there is no user found, create them
          var newUser = {};

          // take information returned from github and using that data,
          // parse through it and make a newUser object.
          newUser.github_id      = profile.id;
          newUser.username       = profile.username;
          newUser.email          = profile.emails[0].value;
          // save our user to the database
          User.addUser(newUser, function(err, results) {
            if (err) throw err;

            // if successful, return the new user
            return done(null, results);
          });
        }
      });
    });
  }));


};
  //*************************************************************
  //Local Auth
  //*************************************************************
  // passport.use('local-signup', new LocalStrategy({
  //   usernameField: 'email',
  //   passwordField: 'password',
  //   passReqToCallback: true
  // },
  // function(req, email, password, done){
  //   process.nextTick(function(){
  //     User.findLocalUser(req.email, function(err, user){
  //       if(err)
  //         return done(err);
  //       if(user){
  //         return done(null, false, req.flash('signupMessage', 'That email already exists'));
  //       } else {
  //         var newUser = {};
  //         newUser.email = email;
  //         newUser.password = newUser.generateHash(password);

  //         User.addLocalUser(newUser, function(err, results){
  //           if(err) throw err;
  //           //return user if successful
  //           return done(null, results);
  //         });
  //       }
  //     })
  //   });
  // }));

  // passport.use('local', new LocalStrategy({
  //   usernameField: 'email',
  //   passwordField: 'password',
  //   passReqToCallback: true
  // },
  // function(req, email, password, done){
  //   process.nextTick(function(){
  //     User.findLocalUser(req.email, function(err, user){
  //       if(err)
  //         return done(err);
  //       if(!user)
  //         return done(null, false, req.flash('signinMessage', 'No user found'));
  //       if(!User.generateHash(password)){
  //         return done(null, false, req.flash('signinMessage', 'Invalid password'));
  //       }
  //       return done(null, user);
  //     });
  //   });
  // }
  // ));



var pg = require('pg');
var auth = process.env.DATABASE_URL ? null : require('../config/authStore.js');

//This sets up you connection to the database. if on heroku, it links to the postgres database URL they give us.
//Otherwise, it goes to the auth file and pulls it from there.

//*************************************
//Commenting out Paris settings to test
//*************************************

var db = require('knex')({
  client: 'pg',
  connection: 'postgres'
});

//var db = new pg.Client("");
//db.connect();


module.exports = db;


var db = require('../db/db.js');

module.exports.addTask = function (task) {
  // task is {title, description, points, status[complete|inprogress|todo], sprint_id, user_id}
  var testKeys = Object.keys(task).sort();
  if (testKeys !== ['description', 'points', 'sprint_id', 'status', 'title', 'user_id']) {
    return false;
  }
  db("features").insert(task).returning('id').then(
    function (id) {
      console.log('Task inserted at id: ' + id);
      return true;
    }, 
    function (error) {
      console.error(error);
      return false;
    }
  );
};

module.exports.getAllTasks = function (sprint_id) {
  db.select('*').from('features').where('sprint_id', sprint_id).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getCompleteTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'complete'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getInProgressTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'inprogress'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getToDoTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'todo'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getTasksByStatus = function (sprint_id, status) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: status}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getCommentsOnTask = function (feature_id) {
  db.select('*').from('comments').where('feature_id', feature_id).then(
    function (comments) {
      return comments;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

//userModel.js
var db = require('../db/db.js');
var bcrypt = require('bcrypt');

exports.addUser = function(user, cb){
  db('users').insert({email: user.email, username: user.username, github_id: user.github_id}).then(function(){
    // console.log("user inserted");
  })
};

exports.findUserByGithubId = function(id, cb){
  db.select('*').from('users').where('github_id', id).then(function(user){
    cb(null, user[0]);
  });
};

exports.findLocalUser = function(email, cb){
  db.select('*').from('users').where('email', email).then(function(user){
    console.log('Logged here ')
    cb(null, user[0]);
  });
};

exports.addLocalUser = function(user, cb){
  db('users').insert({email: user.email, password: user.password})
  .then(function(){
    console.log('Local user inserted');
  });
};

exports.generateHash = function(password){
  var hash = bcrypt.hashSync(password, 10);
  console.log('password: ' + password + ' hash: ' + hash);
  return hash;
}

//userHandler.js

var User = require('./models/userModel');
var passport = require('passport');
var authStore = require('./config/authStore');

module.exports = function(app){

  app.get('/auth/github', passport.authenticate('github'));

  app.get('/auth/github/callback',
    passport.authenticate('github', { failureRedirect: '/#/signin'}),
  function(req, res) {
    res.redirect('/#/storyboard');
  });

  app.get('/logout', function(req, res) {
    req.logout();
    res.redirect('/');
  });

  // app.get('/signin', function(req, res, next){
  //     res.render('/#/signin');
  // });
  // app.post('/signin', passport.authenticate('local', {
  //   successRedirect: '/storyBoard',
  //   failureRedirect: '/signin',
  //   failureFlash: true
  // }));

  // app.get('/signup', function(req, res){
  //   res.redirect('signup', { message: req.flash('signupMessage') });
  // });
  // app.post('/signup', passport.authenticate('local', {
  //   successRedirect: '/signin',
  //   failureRedirect: '/signup',
  //   failureFlash: true
  // }));

  function isLoggedIn(req, res, next) {
    if(req.isAuthenticated()){
      return next();
    }

    res.redirect('/#/signin');
  }

};

var express = require('express');
var app = express();
var port = process.env.PORT || 3000;
var routes = require(__dirname + '/routes.js');
var session = require('express-session');
var morgan = require('morgan');
var bodyParser = require('body-parser');
var passport = require('passport');
var flash = require('connect-flash');

require('./config/passport')(passport);

app.use(bodyParser.urlencoded({extended: false}));
app.use(session({secret: 'anystringoftext',
         saveUninitialized: true,
         resave: true}));

app.use(passport.initialize());
app.use(passport.session());
app.use(flash());

app.use(express.static(__dirname + '/../client'));
// app.set('view engine', 'html');
app.engine('html', require('ejs').renderFile);

routes(app);

app.listen(port);

console.log('Scrummage server running on port: ' + port);




var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",
callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),
!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);
var passport = require('passport');

exports.authorizeForAPI = function(req, res, next){
    if(!req.isAuthenticated()) {
      res.sendStatus(403);
    } else {
      next();
    }
  };

exports.checkUser = function(req, res, next){
  if (!req.isAuthenticated()){
    return res.json({permission: false});
  } else {
    return res.json({permission: true});
  }
};

exports.pgData = {
      host: 'localhost',
      database: 'postgres',
      user : 'student',
      port : 5432,
      password : '',
      ssl: false
    };

// var LocalStrategy = require('passport-local').Strategy;
var User = require('../models/userModel.js');
var passport = require('passport');
var GithubStrategy = require('passport-github').Strategy;
var LocalStrategy = require('passport-local').Strategy;
var bcrypt = require('bcrypt');
var flash = require('connect-flash');

module.exports = function(passport) {

  passport.serializeUser(function(user, done) {
    done(null, user.id);
  });

  passport.deserializeUser(function(id, done) {

    User.findUserByGithubId(id, function(err, user) {

      user ? done(null, user) : done(err, null);
    });
  });
  //*************************************************************
  //Github OAuth
  //*************************************************************
  passport.use(new GithubStrategy({
    clientID: '3cf6f618800a697e2bc5',
    clientSecret: 'b160a044255899ac3cc086064b8783ff40fd0c23',
    callbackURL: 'http://127.0.0.1:3000/auth/github/callback',
    passReqToCallback: true
  },

  function(req, accessToken, refreshToken, profile, done){
    // console.log(profile);
    process.nextTick(function() {
      var github_id = profile.id;

      // find the user in the database based on their github_id
      User.findUserByGithubId(github_id, function(err, user) {

        // if there is an error, stop everything and return that
        // i.e. an error connecting to the database
        if (err) return done(err);

        // if the user is found, then log them in
        if (user) {
          return done(null, user);
        } else {

          // if there is no user found, create them
          var newUser = {};

          // take information returned from github and using that data,
          // parse through it and make a newUser object.
          newUser.github_id      = profile.id;
          newUser.username       = profile.username;
          newUser.email          = profile.emails[0].value;
          // save our user to the database
          User.addUser(newUser, function(err, results) {
            if (err) throw err;

            // if successful, return the new user
            return done(null, results);
          });
        }
      });
    });
  }));


};
  //*************************************************************
  //Local Auth
  //*************************************************************
  // passport.use('local-signup', new LocalStrategy({
  //   usernameField: 'email',
  //   passwordField: 'password',
  //   passReqToCallback: true
  // },
  // function(req, email, password, done){
  //   process.nextTick(function(){
  //     User.findLocalUser(req.email, function(err, user){
  //       if(err)
  //         return done(err);
  //       if(user){
  //         return done(null, false, req.flash('signupMessage', 'That email already exists'));
  //       } else {
  //         var newUser = {};
  //         newUser.email = email;
  //         newUser.password = newUser.generateHash(password);

  //         User.addLocalUser(newUser, function(err, results){
  //           if(err) throw err;
  //           //return user if successful
  //           return done(null, results);
  //         });
  //       }
  //     })
  //   });
  // }));

  // passport.use('local', new LocalStrategy({
  //   usernameField: 'email',
  //   passwordField: 'password',
  //   passReqToCallback: true
  // },
  // function(req, email, password, done){
  //   process.nextTick(function(){
  //     User.findLocalUser(req.email, function(err, user){
  //       if(err)
  //         return done(err);
  //       if(!user)
  //         return done(null, false, req.flash('signinMessage', 'No user found'));
  //       if(!User.generateHash(password)){
  //         return done(null, false, req.flash('signinMessage', 'Invalid password'));
  //       }
  //       return done(null, user);
  //     });
  //   });
  // }
  // ));



var pg = require('pg');
var auth = process.env.DATABASE_URL ? null : require('../config/authStore.js');

//This sets up you connection to the database. if on heroku, it links to the postgres database URL they give us.
//Otherwise, it goes to the auth file and pulls it from there.

//*************************************
//Commenting out Paris settings to test
//*************************************

var db = require('knex')({
  client: 'pg',
  connection: 'postgres'
});

//var db = new pg.Client("");
//db.connect();


module.exports = db;


var db = require('../db/db.js');

module.exports.addTask = function (task) {
  // task is {title, description, points, status[complete|inprogress|todo], sprint_id, user_id}
  var testKeys = Object.keys(task).sort();
  if (testKeys !== ['description', 'points', 'sprint_id', 'status', 'title', 'user_id']) {
    return false;
  }
  db("features").insert(task).returning('id').then(
    function (id) {
      console.log('Task inserted at id: ' + id);
      return true;
    }, 
    function (error) {
      console.error(error);
      return false;
    }
  );
};

module.exports.getAllTasks = function (sprint_id) {
  db.select('*').from('features').where('sprint_id', sprint_id).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getCompleteTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'complete'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getInProgressTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'inprogress'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getToDoTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'todo'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getTasksByStatus = function (sprint_id, status) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: status}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getCommentsOnTask = function (feature_id) {
  db.select('*').from('comments').where('feature_id', feature_id).then(
    function (comments) {
      return comments;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

//userModel.js
var db = require('../db/db.js');
var bcrypt = require('bcrypt');

exports.addUser = function(user, cb){
  db('users').insert({email: user.email, username: user.username, github_id: user.github_id}).then(function(){
    // console.log("user inserted");
  })
};

exports.findUserByGithubId = function(id, cb){
  db.select('*').from('users').where('github_id', id).then(function(user){
    cb(null, user[0]);
  });
};

exports.findLocalUser = function(email, cb){
  db.select('*').from('users').where('email', email).then(function(user){
    console.log('Logged here ')
    cb(null, user[0]);
  });
};

exports.addLocalUser = function(user, cb){
  db('users').insert({email: user.email, password: user.password})
  .then(function(){
    console.log('Local user inserted');
  });
};

exports.generateHash = function(password){
  var hash = bcrypt.hashSync(password, 10);
  console.log('password: ' + password + ' hash: ' + hash);
  return hash;
}

//userHandler.js

var User = require('./models/userModel');
var passport = require('passport');
var authStore = require('./config/authStore');

module.exports = function(app){

  app.get('/auth/github', passport.authenticate('github'));

  app.get('/auth/github/callback',
    passport.authenticate('github', { failureRedirect: '/#/signin'}),
  function(req, res) {
    res.redirect('/#/storyboard');
  });

  app.get('/logout', function(req, res) {
    req.logout();
    res.redirect('/');
  });

  // app.get('/signin', function(req, res, next){
  //     res.render('/#/signin');
  // });
  // app.post('/signin', passport.authenticate('local', {
  //   successRedirect: '/storyBoard',
  //   failureRedirect: '/signin',
  //   failureFlash: true
  // }));

  // app.get('/signup', function(req, res){
  //   res.redirect('signup', { message: req.flash('signupMessage') });
  // });
  // app.post('/signup', passport.authenticate('local', {
  //   successRedirect: '/signin',
  //   failureRedirect: '/signup',
  //   failureFlash: true
  // }));

  function isLoggedIn(req, res, next) {
    if(req.isAuthenticated()){
      return next();
    }

    res.redirect('/#/signin');
  }

};

var express = require('express');
var app = express();
var port = process.env.PORT || 3000;
var routes = require(__dirname + '/routes.js');
var session = require('express-session');
var morgan = require('morgan');
var bodyParser = require('body-parser');
var passport = require('passport');
var flash = require('connect-flash');

require('./config/passport')(passport);

app.use(bodyParser.urlencoded({extended: false}));
app.use(session({secret: 'anystringoftext',
         saveUninitialized: true,
         resave: true}));

app.use(passport.initialize());
app.use(passport.session());
app.use(flash());

app.use(express.static(__dirname + '/../client'));
// app.set('view engine', 'html');
app.engine('html', require('ejs').renderFile);

routes(app);

app.listen(port);

console.log('Scrummage server running on port: ' + port);




var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",
callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),
!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a);
})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),
b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);
var passport = require('passport');

exports.authorizeForAPI = function(req, res, next){
    if(!req.isAuthenticated()) {
      res.sendStatus(403);
    } else {
      next();
    }
  };

exports.checkUser = function(req, res, next){
  if (!req.isAuthenticated()){
    return res.json({permission: false});
  } else {
    return res.json({permission: true});
  }
};

exports.pgData = {
      host: 'localhost',
      database: 'postgres',
      user : 'student',
      port : 5432,
      password : '',
      ssl: false
    };

// var LocalStrategy = require('passport-local').Strategy;
var User = require('../models/userModel.js');
var passport = require('passport');
var GithubStrategy = require('passport-github').Strategy;
var LocalStrategy = require('passport-local').Strategy;
var bcrypt = require('bcrypt');
var flash = require('connect-flash');

module.exports = function(passport) {

  passport.serializeUser(function(user, done) {
    done(null, user.id);
  });

  passport.deserializeUser(function(id, done) {

    User.findUserByGithubId(id, function(err, user) {

      user ? done(null, user) : done(err, null);
    });
  });
  //*************************************************************
  //Github OAuth
  //*************************************************************
  passport.use(new GithubStrategy({
    clientID: '3cf6f618800a697e2bc5',
    clientSecret: 'b160a044255899ac3cc086064b8783ff40fd0c23',
    callbackURL: 'http://127.0.0.1:3000/auth/github/callback',
    passReqToCallback: true
  },

  function(req, accessToken, refreshToken, profile, done){
    // console.log(profile);
    process.nextTick(function() {
      var github_id = profile.id;

      // find the user in the database based on their github_id
      User.findUserByGithubId(github_id, function(err, user) {

        // if there is an error, stop everything and return that
        // i.e. an error connecting to the database
        if (err) return done(err);

        // if the user is found, then log them in
        if (user) {
          return done(null, user);
        } else {

          // if there is no user found, create them
          var newUser = {};

          // take information returned from github and using that data,
          // parse through it and make a newUser object.
          newUser.github_id      = profile.id;
          newUser.username       = profile.username;
          newUser.email          = profile.emails[0].value;
          // save our user to the database
          User.addUser(newUser, function(err, results) {
            if (err) throw err;

            // if successful, return the new user
            return done(null, results);
          });
        }
      });
    });
  }));


};
  //*************************************************************
  //Local Auth
  //*************************************************************
  // passport.use('local-signup', new LocalStrategy({
  //   usernameField: 'email',
  //   passwordField: 'password',
  //   passReqToCallback: true
  // },
  // function(req, email, password, done){
  //   process.nextTick(function(){
  //     User.findLocalUser(req.email, function(err, user){
  //       if(err)
  //         return done(err);
  //       if(user){
  //         return done(null, false, req.flash('signupMessage', 'That email already exists'));
  //       } else {
  //         var newUser = {};
  //         newUser.email = email;
  //         newUser.password = newUser.generateHash(password);

  //         User.addLocalUser(newUser, function(err, results){
  //           if(err) throw err;
  //           //return user if successful
  //           return done(null, results);
  //         });
  //       }
  //     })
  //   });
  // }));

  // passport.use('local', new LocalStrategy({
  //   usernameField: 'email',
  //   passwordField: 'password',
  //   passReqToCallback: true
  // },
  // function(req, email, password, done){
  //   process.nextTick(function(){
  //     User.findLocalUser(req.email, function(err, user){
  //       if(err)
  //         return done(err);
  //       if(!user)
  //         return done(null, false, req.flash('signinMessage', 'No user found'));
  //       if(!User.generateHash(password)){
  //         return done(null, false, req.flash('signinMessage', 'Invalid password'));
  //       }
  //       return done(null, user);
  //     });
  //   });
  // }
  // ));



var pg = require('pg');
var auth = process.env.DATABASE_URL ? null : require('../config/authStore.js');

//This sets up you connection to the database. if on heroku, it links to the postgres database URL they give us.
//Otherwise, it goes to the auth file and pulls it from there.

//*************************************
//Commenting out Paris settings to test
//*************************************

var db = require('knex')({
  client: 'pg',
  connection: 'postgres'
});

//var db = new pg.Client("");
//db.connect();


module.exports = db;


var db = require('../db/db.js');

module.exports.addTask = function (task) {
  // task is {title, description, points, status[complete|inprogress|todo], sprint_id, user_id}
  var testKeys = Object.keys(task).sort();
  if (testKeys !== ['description', 'points', 'sprint_id', 'status', 'title', 'user_id']) {
    return false;
  }
  db("features").insert(task).returning('id').then(
    function (id) {
      console.log('Task inserted at id: ' + id);
      return true;
    }, 
    function (error) {
      console.error(error);
      return false;
    }
  );
};

module.exports.getAllTasks = function (sprint_id) {
  db.select('*').from('features').where('sprint_id', sprint_id).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getCompleteTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'complete'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getInProgressTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'inprogress'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getToDoTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'todo'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getTasksByStatus = function (sprint_id, status) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: status}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getCommentsOnTask = function (feature_id) {
  db.select('*').from('comments').where('feature_id', feature_id).then(
    function (comments) {
      return comments;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

//userModel.js
var db = require('../db/db.js');
var bcrypt = require('bcrypt');

exports.addUser = function(user, cb){
  db('users').insert({email: user.email, username: user.username, github_id: user.github_id}).then(function(){
    // console.log("user inserted");
  })
};

exports.findUserByGithubId = function(id, cb){
  db.select('*').from('users').where('github_id', id).then(function(user){
    cb(null, user[0]);
  });
};

exports.findLocalUser = function(email, cb){
  db.select('*').from('users').where('email', email).then(function(user){
    console.log('Logged here ')
    cb(null, user[0]);
  });
};

exports.addLocalUser = function(user, cb){
  db('users').insert({email: user.email, password: user.password})
  .then(function(){
    console.log('Local user inserted');
  });
};

exports.generateHash = function(password){
  var hash = bcrypt.hashSync(password, 10);
  console.log('password: ' + password + ' hash: ' + hash);
  return hash;
}

//userHandler.js

var User = require('./models/userModel');
var passport = require('passport');
var authStore = require('./config/authStore');

module.exports = function(app){

  app.get('/auth/github', passport.authenticate('github'));

  app.get('/auth/github/callback',
    passport.authenticate('github', { failureRedirect: '/#/signin'}),
  function(req, res) {
    res.redirect('/#/storyboard');
  });

  app.get('/logout', function(req, res) {
    req.logout();
    res.redirect('/');
  });

  // app.get('/signin', function(req, res, next){
  //     res.render('/#/signin');
  // });
  // app.post('/signin', passport.authenticate('local', {
  //   successRedirect: '/storyBoard',
  //   failureRedirect: '/signin',
  //   failureFlash: true
  // }));

  // app.get('/signup', function(req, res){
  //   res.redirect('signup', { message: req.flash('signupMessage') });
  // });
  // app.post('/signup', passport.authenticate('local', {
  //   successRedirect: '/signin',
  //   failureRedirect: '/signup',
  //   failureFlash: true
  // }));

  function isLoggedIn(req, res, next) {
    if(req.isAuthenticated()){
      return next();
    }

    res.redirect('/#/signin');
  }

};

var express = require('express');
var app = express();
var port = process.env.PORT || 3000;
var routes = require(__dirname + '/routes.js');
var session = require('express-session');
var morgan = require('morgan');
var bodyParser = require('body-parser');
var passport = require('passport');
var flash = require('connect-flash');

require('./config/passport')(passport);

app.use(bodyParser.urlencoded({extended: false}));
app.use(session({secret: 'anystringoftext',
         saveUninitialized: true,
         resave: true}));

app.use(passport.initialize());
app.use(passport.session());
app.use(flash());

app.use(express.static(__dirname + '/../client'));
// app.set('view engine', 'html');
app.engine('html', require('ejs').renderFile);

routes(app);

app.listen(port);

console.log('Scrummage server running on port: ' + port);




var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",
callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),
!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a);
})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),
b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),
app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){
b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();
return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"
}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);
var passport = require('passport');

exports.authorizeForAPI = function(req, res, next){
    if(!req.isAuthenticated()) {
      res.sendStatus(403);
    } else {
      next();
    }
  };

exports.checkUser = function(req, res, next){
  if (!req.isAuthenticated()){
    return res.json({permission: false});
  } else {
    return res.json({permission: true});
  }
};

exports.pgData = {
      host: 'localhost',
      database: 'postgres',
      user : 'student',
      port : 5432,
      password : '',
      ssl: false
    };

// var LocalStrategy = require('passport-local').Strategy;
var User = require('../models/userModel.js');
var passport = require('passport');
var GithubStrategy = require('passport-github').Strategy;
var LocalStrategy = require('passport-local').Strategy;
var bcrypt = require('bcrypt');
var flash = require('connect-flash');

module.exports = function(passport) {

  passport.serializeUser(function(user, done) {
    done(null, user.id);
  });

  passport.deserializeUser(function(id, done) {

    User.findUserByGithubId(id, function(err, user) {

      user ? done(null, user) : done(err, null);
    });
  });
  //*************************************************************
  //Github OAuth
  //*************************************************************
  passport.use(new GithubStrategy({
    clientID: '3cf6f618800a697e2bc5',
    clientSecret: 'b160a044255899ac3cc086064b8783ff40fd0c23',
    callbackURL: 'http://127.0.0.1:3000/auth/github/callback',
    passReqToCallback: true
  },

  function(req, accessToken, refreshToken, profile, done){
    // console.log(profile);
    process.nextTick(function() {
      var github_id = profile.id;

      // find the user in the database based on their github_id
      User.findUserByGithubId(github_id, function(err, user) {

        // if there is an error, stop everything and return that
        // i.e. an error connecting to the database
        if (err) return done(err);

        // if the user is found, then log them in
        if (user) {
          return done(null, user);
        } else {

          // if there is no user found, create them
          var newUser = {};

          // take information returned from github and using that data,
          // parse through it and make a newUser object.
          newUser.github_id      = profile.id;
          newUser.username       = profile.username;
          newUser.email          = profile.emails[0].value;
          // save our user to the database
          User.addUser(newUser, function(err, results) {
            if (err) throw err;

            // if successful, return the new user
            return done(null, results);
          });
        }
      });
    });
  }));


};
  //*************************************************************
  //Local Auth
  //*************************************************************
  // passport.use('local-signup', new LocalStrategy({
  //   usernameField: 'email',
  //   passwordField: 'password',
  //   passReqToCallback: true
  // },
  // function(req, email, password, done){
  //   process.nextTick(function(){
  //     User.findLocalUser(req.email, function(err, user){
  //       if(err)
  //         return done(err);
  //       if(user){
  //         return done(null, false, req.flash('signupMessage', 'That email already exists'));
  //       } else {
  //         var newUser = {};
  //         newUser.email = email;
  //         newUser.password = newUser.generateHash(password);

  //         User.addLocalUser(newUser, function(err, results){
  //           if(err) throw err;
  //           //return user if successful
  //           return done(null, results);
  //         });
  //       }
  //     })
  //   });
  // }));

  // passport.use('local', new LocalStrategy({
  //   usernameField: 'email',
  //   passwordField: 'password',
  //   passReqToCallback: true
  // },
  // function(req, email, password, done){
  //   process.nextTick(function(){
  //     User.findLocalUser(req.email, function(err, user){
  //       if(err)
  //         return done(err);
  //       if(!user)
  //         return done(null, false, req.flash('signinMessage', 'No user found'));
  //       if(!User.generateHash(password)){
  //         return done(null, false, req.flash('signinMessage', 'Invalid password'));
  //       }
  //       return done(null, user);
  //     });
  //   });
  // }
  // ));



var pg = require('pg');
var auth = process.env.DATABASE_URL ? null : require('../config/authStore.js');

//This sets up you connection to the database. if on heroku, it links to the postgres database URL they give us.
//Otherwise, it goes to the auth file and pulls it from there.

//*************************************
//Commenting out Paris settings to test
//*************************************

var db = require('knex')({
  client: 'pg',
  connection: 'postgres'
});

//var db = new pg.Client("");
//db.connect();


module.exports = db;


var db = require('../db/db.js');

module.exports.addTask = function (task) {
  // task is {title, description, points, status[complete|inprogress|todo], sprint_id, user_id}
  var testKeys = Object.keys(task).sort();
  if (testKeys !== ['description', 'points', 'sprint_id', 'status', 'title', 'user_id']) {
    return false;
  }
  db("features").insert(task).returning('id').then(
    function (id) {
      console.log('Task inserted at id: ' + id);
      return true;
    }, 
    function (error) {
      console.error(error);
      return false;
    }
  );
};

module.exports.getAllTasks = function (sprint_id) {
  db.select('*').from('features').where('sprint_id', sprint_id).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getCompleteTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'complete'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getInProgressTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'inprogress'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getToDoTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'todo'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getTasksByStatus = function (sprint_id, status) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: status}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getCommentsOnTask = function (feature_id) {
  db.select('*').from('comments').where('feature_id', feature_id).then(
    function (comments) {
      return comments;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

//userModel.js
var db = require('../db/db.js');
var bcrypt = require('bcrypt');

exports.addUser = function(user, cb){
  db('users').insert({email: user.email, username: user.username, github_id: user.github_id}).then(function(){
    // console.log("user inserted");
  })
};

exports.findUserByGithubId = function(id, cb){
  db.select('*').from('users').where('github_id', id).then(function(user){
    cb(null, user[0]);
  });
};

exports.findLocalUser = function(email, cb){
  db.select('*').from('users').where('email', email).then(function(user){
    console.log('Logged here ')
    cb(null, user[0]);
  });
};

exports.addLocalUser = function(user, cb){
  db('users').insert({email: user.email, password: user.password})
  .then(function(){
    console.log('Local user inserted');
  });
};

exports.generateHash = function(password){
  var hash = bcrypt.hashSync(password, 10);
  console.log('password: ' + password + ' hash: ' + hash);
  return hash;
}

//userHandler.js

var User = require('./models/userModel');
var passport = require('passport');
var authStore = require('./config/authStore');

module.exports = function(app){

  app.get('/auth/github', passport.authenticate('github'));

  app.get('/auth/github/callback',
    passport.authenticate('github', { failureRedirect: '/#/signin'}),
  function(req, res) {
    res.redirect('/#/storyboard');
  });

  app.get('/logout', function(req, res) {
    req.logout();
    res.redirect('/');
  });

  // app.get('/signin', function(req, res, next){
  //     res.render('/#/signin');
  // });
  // app.post('/signin', passport.authenticate('local', {
  //   successRedirect: '/storyBoard',
  //   failureRedirect: '/signin',
  //   failureFlash: true
  // }));

  // app.get('/signup', function(req, res){
  //   res.redirect('signup', { message: req.flash('signupMessage') });
  // });
  // app.post('/signup', passport.authenticate('local', {
  //   successRedirect: '/signin',
  //   failureRedirect: '/signup',
  //   failureFlash: true
  // }));

  function isLoggedIn(req, res, next) {
    if(req.isAuthenticated()){
      return next();
    }

    res.redirect('/#/signin');
  }

};

var express = require('express');
var app = express();
var port = process.env.PORT || 3000;
var routes = require(__dirname + '/routes.js');
var session = require('express-session');
var morgan = require('morgan');
var bodyParser = require('body-parser');
var passport = require('passport');
var flash = require('connect-flash');

require('./config/passport')(passport);

app.use(bodyParser.urlencoded({extended: false}));
app.use(session({secret: 'anystringoftext',
         saveUninitialized: true,
         resave: true}));

app.use(passport.initialize());
app.use(passport.session());
app.use(flash());

app.use(express.static(__dirname + '/../client'));
// app.set('view engine', 'html');
app.engine('html', require('ejs').renderFile);

routes(app);

app.listen(port);

console.log('Scrummage server running on port: ' + port);




var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",
callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),
!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a);
})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),
b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),
app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){
b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();
return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"
}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0]);
})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");
require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");
module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");
module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){
db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){
console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");
require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");
module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");
module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);var passport=require("passport");exports.authorizeForAPI=function(a,b,c){a.isAuthenticated()?c():b.sendStatus(403)},exports.checkUser=function(a,b,c){return a.isAuthenticated()?b.json({permission:!0}):b.json({permission:!1})},exports.pgData={host:"localhost",database:"postgres",user:"student",port:5432,password:"",ssl:!1};var User=require("../models/userModel.js"),passport=require("passport"),GithubStrategy=require("passport-github").Strategy,LocalStrategy=require("passport-local").Strategy,bcrypt=require("bcrypt"),flash=require("connect-flash");module.exports=function(a){a.serializeUser(function(a,b){b(null,a.id)}),a.deserializeUser(function(a,b){User.findUserByGithubId(a,function(a,c){c?b(null,c):b(a,null)})}),a.use(new GithubStrategy({clientID:"3cf6f618800a697e2bc5",clientSecret:"b160a044255899ac3cc086064b8783ff40fd0c23",callbackURL:"http://127.0.0.1:3000/auth/github/callback",passReqToCallback:!0},function(a,b,c,d,e){process.nextTick(function(){var a=d.id;User.findUserByGithubId(a,function(a,b){if(a)return e(a);if(b)return e(null,b);var c={};c.github_id=d.id,c.username=d.username,c.email=d.emails[0].value,User.addUser(c,function(a,b){if(a)throw a;return e(null,b)})})})}))};var pg=require("pg"),auth=process.env.DATABASE_URL?null:require("../config/authStore.js"),db=require("knex")({client:"pg",connection:"postgres"});module.exports=db;var db=require("../db/db.js");module.exports.addTask=function(a){var b=Object.keys(a).sort();return b!==["description","points","sprint_id","status","title","user_id"]?!1:void db("features").insert(a).returning("id").then(function(a){return console.log("Task inserted at id: "+a),!0},function(a){return console.error(a),!1})},module.exports.getAllTasks=function(a){db.select("*").from("features").where("sprint_id",a).then(function(a){return a},function(a){console.error(a)})},module.exports.getCompleteTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"complete"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getInProgressTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"inprogress"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getToDoTasks=function(a){db.select("*").from("features").where({sprint_id:a,status:"todo"}).then(function(a){return a},function(a){console.error(a)})},module.exports.getTasksByStatus=function(a,b){db.select("*").from("features").where({sprint_id:a,status:b}).then(function(a){return a},function(a){console.error(a)})},module.exports.getCommentsOnTask=function(a){db.select("*").from("comments").where("feature_id",a).then(function(a){return a},function(a){console.error(a)})};var db=require("../db/db.js"),bcrypt=require("bcrypt");exports.addUser=function(a,b){db("users").insert({email:a.email,username:a.username,github_id:a.github_id}).then(function(){})},exports.findUserByGithubId=function(a,b){db.select("*").from("users").where("github_id",a).then(function(a){b(null,a[0])})},exports.findLocalUser=function(a,b){db.select("*").from("users").where("email",a).then(function(a){console.log("Logged here "),b(null,a[0])})},exports.addLocalUser=function(a,b){db("users").insert({email:a.email,password:a.password}).then(function(){console.log("Local user inserted")})},exports.generateHash=function(a){var b=bcrypt.hashSync(a,10);return console.log("password: "+a+" hash: "+b),b};var User=require("./models/userModel"),passport=require("passport"),authStore=require("./config/authStore");module.exports=function(a){a.get("/auth/github",passport.authenticate("github")),a.get("/auth/github/callback",passport.authenticate("github",{failureRedirect:"/#/signin"}),function(a,b){b.redirect("/#/storyboard")}),a.get("/logout",function(a,b){a.logout(),b.redirect("/")})};var express=require("express"),app=express(),port=process.env.PORT||3e3,routes=require(__dirname+"/routes.js"),session=require("express-session"),morgan=require("morgan"),bodyParser=require("body-parser"),passport=require("passport"),flash=require("connect-flash");require("./config/passport")(passport),app.use(bodyParser.urlencoded({extended:!1})),app.use(session({secret:"anystringoftext",saveUninitialized:!0,resave:!0})),app.use(passport.initialize()),app.use(passport.session()),app.use(flash()),app.use(express["static"](__dirname+"/../client")),app.engine("html",require("ejs").renderFile),routes(app),app.listen(port),console.log("Scrummage server running on port: "+port);
var passport = require('passport');

exports.authorizeForAPI = function(req, res, next){
    if(!req.isAuthenticated()) {
      res.sendStatus(403);
    } else {
      next();
    }
  };

exports.checkUser = function(req, res, next){
  if (!req.isAuthenticated()){
    return res.json({permission: false});
  } else {
    return res.json({permission: true});
  }
};

exports.pgData = {
      host: 'localhost',
      database: 'postgres',
      user : 'student',
      port : 5432,
      password : '',
      ssl: false
    };

// var LocalStrategy = require('passport-local').Strategy;
var User = require('../models/userModel.js');
var passport = require('passport');
var GithubStrategy = require('passport-github').Strategy;
var LocalStrategy = require('passport-local').Strategy;
var bcrypt = require('bcrypt');
var flash = require('connect-flash');

module.exports = function(passport) {

  passport.serializeUser(function(user, done) {
    done(null, user.id);
  });

  passport.deserializeUser(function(id, done) {

    User.findUserByGithubId(id, function(err, user) {

      user ? done(null, user) : done(err, null);
    });
  });
  //*************************************************************
  //Github OAuth
  //*************************************************************
  passport.use(new GithubStrategy({
    clientID: '3cf6f618800a697e2bc5',
    clientSecret: 'b160a044255899ac3cc086064b8783ff40fd0c23',
    callbackURL: 'http://127.0.0.1:3000/auth/github/callback',
    passReqToCallback: true
  },

  function(req, accessToken, refreshToken, profile, done){
    // console.log(profile);
    process.nextTick(function() {
      var github_id = profile.id;

      // find the user in the database based on their github_id
      User.findUserByGithubId(github_id, function(err, user) {

        // if there is an error, stop everything and return that
        // i.e. an error connecting to the database
        if (err) return done(err);

        // if the user is found, then log them in
        if (user) {
          return done(null, user);
        } else {

          // if there is no user found, create them
          var newUser = {};

          // take information returned from github and using that data,
          // parse through it and make a newUser object.
          newUser.github_id      = profile.id;
          newUser.username       = profile.username;
          newUser.email          = profile.emails[0].value;
          // save our user to the database
          User.addUser(newUser, function(err, results) {
            if (err) throw err;

            // if successful, return the new user
            return done(null, results);
          });
        }
      });
    });
  }));


};
  //*************************************************************
  //Local Auth
  //*************************************************************
  // passport.use('local-signup', new LocalStrategy({
  //   usernameField: 'email',
  //   passwordField: 'password',
  //   passReqToCallback: true
  // },
  // function(req, email, password, done){
  //   process.nextTick(function(){
  //     User.findLocalUser(req.email, function(err, user){
  //       if(err)
  //         return done(err);
  //       if(user){
  //         return done(null, false, req.flash('signupMessage', 'That email already exists'));
  //       } else {
  //         var newUser = {};
  //         newUser.email = email;
  //         newUser.password = newUser.generateHash(password);

  //         User.addLocalUser(newUser, function(err, results){
  //           if(err) throw err;
  //           //return user if successful
  //           return done(null, results);
  //         });
  //       }
  //     })
  //   });
  // }));

  // passport.use('local', new LocalStrategy({
  //   usernameField: 'email',
  //   passwordField: 'password',
  //   passReqToCallback: true
  // },
  // function(req, email, password, done){
  //   process.nextTick(function(){
  //     User.findLocalUser(req.email, function(err, user){
  //       if(err)
  //         return done(err);
  //       if(!user)
  //         return done(null, false, req.flash('signinMessage', 'No user found'));
  //       if(!User.generateHash(password)){
  //         return done(null, false, req.flash('signinMessage', 'Invalid password'));
  //       }
  //       return done(null, user);
  //     });
  //   });
  // }
  // ));



var pg = require('pg');
var auth = process.env.DATABASE_URL ? null : require('../config/authStore.js');

//This sets up you connection to the database. if on heroku, it links to the postgres database URL they give us.
//Otherwise, it goes to the auth file and pulls it from there.

//*************************************
//Commenting out Paris settings to test
//*************************************

var db = require('knex')({
  client: 'pg',
  connection: 'postgres'
});

//var db = new pg.Client("");
//db.connect();


module.exports = db;


var db = require('../db/db.js');

module.exports.addTask = function (task) {
  // task is {title, description, points, status[complete|inprogress|todo], sprint_id, user_id}
  var testKeys = Object.keys(task).sort();
  if (testKeys !== ['description', 'points', 'sprint_id', 'status', 'title', 'user_id']) {
    return false;
  }
  db("features").insert(task).returning('id').then(
    function (id) {
      console.log('Task inserted at id: ' + id);
      return true;
    }, 
    function (error) {
      console.error(error);
      return false;
    }
  );
};

module.exports.getAllTasks = function (sprint_id) {
  db.select('*').from('features').where('sprint_id', sprint_id).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getCompleteTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'complete'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getInProgressTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'inprogress'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getToDoTasks = function (sprint_id) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: 'todo'}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getTasksByStatus = function (sprint_id, status) {
  db.select('*').from('features').where({sprint_id: sprint_id, status: status}).then(
    function (tasks) {
      return tasks;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

module.exports.getCommentsOnTask = function (feature_id) {
  db.select('*').from('comments').where('feature_id', feature_id).then(
    function (comments) {
      return comments;
    }, 
    function (error) {
      console.error(error);
    }
  );
};

//userModel.js
var db = require('../db/db.js');
var bcrypt = require('bcrypt');

exports.addUser = function(user, cb){
  db('users').insert({email: user.email, username: user.username, github_id: user.github_id}).then(function(){
    // console.log("user inserted");
  })
};

exports.findUserByGithubId = function(id, cb){
  db.select('*').from('users').where('github_id', id).then(function(user){
    cb(null, user[0]);
  });
};

exports.findLocalUser = function(email, cb){
  db.select('*').from('users').where('email', email).then(function(user){
    console.log('Logged here ')
    cb(null, user[0]);
  });
};

exports.addLocalUser = function(user, cb){
  db('users').insert({email: user.email, password: user.password})
  .then(function(){
    console.log('Local user inserted');
  });
};

exports.generateHash = function(password){
  var hash = bcrypt.hashSync(password, 10);
  console.log('password: ' + password + ' hash: ' + hash);
  return hash;
}

//userHandler.js

var User = require('./models/userModel');
var passport = require('passport');
var authStore = require('./config/authStore');

module.exports = function(app){

  app.get('/auth/github', passport.authenticate('github'));

  app.get('/auth/github/callback',
    passport.authenticate('github', { failureRedirect: '/#/signin'}),
  function(req, res) {
    res.redirect('/#/storyboard');
  });

  app.get('/logout', function(req, res) {
    req.logout();
    res.redirect('/');
  });

  // app.get('/signin', function(req, res, next){
  //     res.render('/#/signin');
  // });
  // app.post('/signin', passport.authenticate('local', {
  //   successRedirect: '/storyBoard',
  //   failureRedirect: '/signin',
  //   failureFlash: true
  // }));

  // app.get('/signup', function(req, res){
  //   res.redirect('signup', { message: req.flash('signupMessage') });
  // });
  // app.post('/signup', passport.authenticate('local', {
  //   successRedirect: '/signin',
  //   failureRedirect: '/signup',
  //   failureFlash: true
  // }));

  function isLoggedIn(req, res, next) {
    if(req.isAuthenticated()){
      return next();
    }

    res.redirect('/#/signin');
  }

};

var express = require('express');
var app = express();
var port = process.env.PORT || 3000;
var routes = require(__dirname + '/routes.js');
var session = require('express-session');
var morgan = require('morgan');
var bodyParser = require('body-parser');
var passport = require('passport');
var flash = require('connect-flash');

require('./config/passport')(passport);

app.use(bodyParser.urlencoded({extended: false}));
app.use(session({secret: 'anystringoftext',
         saveUninitialized: true,
         resave: true}));

app.use(passport.initialize());
app.use(passport.session());
app.use(flash());

app.use(express.static(__dirname + '/../client'));
// app.set('view engine', 'html');
app.engine('html', require('ejs').renderFile);

routes(app);

app.listen(port);

console.log('Scrummage server running on port: ' + port);



